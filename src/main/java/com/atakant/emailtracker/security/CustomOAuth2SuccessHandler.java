package com.atakant.emailtracker.security;

import com.atakant.emailtracker.auth.OAuthToken;
import com.atakant.emailtracker.auth.OAuthTokenRepository;
import com.atakant.emailtracker.auth.User;
import com.atakant.emailtracker.auth.UserRepository;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.time.Instant;
import java.util.UUID;

@Slf4j
@Component
@RequiredArgsConstructor
public class CustomOAuth2SuccessHandler implements AuthenticationSuccessHandler {

    private final OAuth2AuthorizedClientService authorizedClientService;
    private final UserRepository userRepository;
    private final OAuthTokenRepository tokenRepository;

    @Override
    @Transactional
    public void onAuthenticationSuccess(HttpServletRequest request,
                                        HttpServletResponse response,
                                        Authentication authentication) throws IOException, ServletException {

        OAuth2AuthenticationToken oauth = (OAuth2AuthenticationToken) authentication;

        // 1) Who is the user?
        var principal = oauth.getPrincipal();
        String email = principal.getAttribute("email");
        if (email == null) {
            // Some Google profiles expose "emailAddress"
            email = principal.getAttribute("emailAddress");
        }
        if (email == null) {
            log.error("OAuth login succeeded but no email attribute found on principal: {}", principal.getAttributes());
            // Fall back to home with an error so we don't 500
            response.sendRedirect("/?authError=noEmail");
            return;
        }

        // 2) Upsert user
        String finalEmail = email;
        User user = userRepository.findByEmail(email).orElseGet(() -> {
            User u = new User();
            u.setId(UUID.randomUUID()); // if your ID is not generated by JPA
            u.setEmail(finalEmail);
            u.setProvider(oauth.getAuthorizedClientRegistrationId()); // "google"
            return userRepository.save(u);
        });

        // 3) Get authorized client (holds access/refresh tokens)
        OAuth2AuthorizedClient client = authorizedClientService.loadAuthorizedClient(
                oauth.getAuthorizedClientRegistrationId(), // "google"
                oauth.getName()
        );

        if (client == null || client.getAccessToken() == null) {
            log.error("Authorized client or access token is null for user {}", email);
            response.sendRedirect("/?authError=noAccessToken");
            return;
        }

        String accessToken = client.getAccessToken().getTokenValue();
        log.info("Saving access token prefix={}", accessToken.substring(0, 8));
        Instant expiresAt = client.getAccessToken().getExpiresAt();
        String refreshToken = client.getRefreshToken() != null ? client.getRefreshToken().getTokenValue() : null;

        // 4) Save tokens (OAuthToken PK == users.id; @MapsId)
        OAuthToken token = tokenRepository.findById(user.getId()).orElseGet(() -> {
            OAuthToken t = new OAuthToken();
            t.setUserId(user.getId());
            t.setUser(user); // important for @MapsId
            return t;
        });
        token.setProvider("google");
        token.setAccessToken(accessToken);
        token.setRefreshToken(refreshToken); // may be null until we request offline access + consent
        token.setExpiresAt(expiresAt);
        tokenRepository.save(token);

        // 5) Continue (prefer saved request; else /dashboard)
        SavedRequestAwareAuthenticationSuccessHandler redirector = new SavedRequestAwareAuthenticationSuccessHandler();
        redirector.setDefaultTargetUrl("/dashboard");
        redirector.setAlwaysUseDefaultTargetUrl(false);
        redirector.onAuthenticationSuccess(request, response, authentication);
    }
}
